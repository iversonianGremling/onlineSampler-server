import { type MediaType } from 'media-typer';
import { type INativeMetadataCollector } from './common/MetadataCollector.js';
import type { IOptions, IAudioMetadata, ParserType } from './type.js';
import type { ITokenizer } from 'strtok3';
export interface ITokenParser {
    /**
     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).
     * @param metadata - Output
     * @param tokenizer - Input
     * @param options - Parsing options
     */
    init(metadata: INativeMetadataCollector, tokenizer: ITokenizer, options: IOptions): ITokenParser;
    /**
     * Parse audio track.
     * Called after init(...).
     * @returns Promise
     */
    parse(): Promise<void>;
}
interface IContentType extends MediaType {
    parameters: {
        [id: string]: string;
    };
}
export declare function parseHttpContentType(contentType: string): IContentType;
/**
 * Parse metadata from tokenizer
 * @param tokenizer - Tokenizer
 * @param opts - Options
 * @returns Native metadata
 */
export declare function parseOnContentType(tokenizer: ITokenizer, opts?: IOptions): Promise<IAudioMetadata>;
export declare function parse(tokenizer: ITokenizer, parserId?: ParserType, opts?: IOptions): Promise<IAudioMetadata>;
/**
 * @param filePath - Path, filename or extension to audio file
 * @return Parser submodule name
 */
export declare function getParserIdForExtension(filePath: string | undefined): ParserType | undefined;
export declare function loadParser(moduleName: ParserType): Promise<ITokenParser>;
export {};
